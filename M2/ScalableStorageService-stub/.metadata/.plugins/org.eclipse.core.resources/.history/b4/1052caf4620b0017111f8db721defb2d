package app_kvEcs;

import client.TextMessage;
import org.apache.log4j.Logger;

import java.io.*;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class Ecs {

    public List<String> mIpAndPorts;
    private static final String PROMPT = "ECS> ";
    private static final int ecsPort = 40000;
    
    private BufferedReader stdin;
    private boolean stop = false;
    private static final int BUFFER_SIZE = 1024;
    private static final int DROP_SIZE = 1024*BUFFER_SIZE;
    private static Logger logger = Logger.getRootLogger();
    public List<String> participatingServers;
    
    public List<String> kvList;

    public void run() {
    	//get all servers within the config file into a accessible data structure
    	readFile();
    	
    	try{
    		//get all values from persisted storage file
        	File outputFile = new File("./data/storage.txt");
    		
    		if(!outputFile.exists()){
    			outputFile.getParentFile().mkdirs();
    			outputFile.createNewFile();
    		}
    		
    		BufferedReader br = new BufferedReader(new FileReader(outputFile));
    		
    		kvList = new ArrayList<String>();
    		
			String line;

			//read every line of the file for each key value pair
			while ((line = br.readLine()) != null) {
				if (line.length() != 0) {
					String[] kv = line.split(" ", 2);
					kvList.add(kv[0] + "," + kv[1]);
				}
			}
			
			br.close();
    		
    	} catch(IOException e){
    		logger.error(e.getMessage());
    	}
    	
        while(!stop) {
            stdin = new BufferedReader(new InputStreamReader(System.in));
            System.out.print(PROMPT);
            
            try {
                String cmdLine = stdin.readLine();
                this.handleCommand(cmdLine);
            } catch (Exception e) {
                stop = true;
                System.out.println("CLI does not respond - Application terminated");
            }
    	}
    }

    private void handleCommand(String cmdline){

        String[] tokens = cmdline.split("\\s+");

        if(tokens[0].equals("quit")) {
            stop = true;
            //	disconnect();
            System.out.println(PROMPT + "Application exit!");
        } else if (tokens[0].equals("initservice")){
            if(tokens.length == 4) {
            	try {
	                int numberOfNodes = Integer.parseInt(tokens[1]);
	                int cacheSize = Integer.parseInt(tokens[2]);
	                String replacementStrategy = tokens[3];
	                
	                initService(numberOfNodes, cacheSize, replacementStrategy);
                } catch (NumberFormatException e){
                	printError(e.getMessage());
                	System.out.println("Usage: initservice <numberOfNodes> <cacheSize> <replacementStrategy>");
                }
            }else{
            	printError("Invalid number of parameters!");
            	System.out.println("Usage: initservice <numberOfNodes> <cacheSize> <replacementStrategy>");
            }
        } else  if (tokens[0].equals("add")) {
            if(tokens.length == 3) {
                int ipAddress = Integer.valueOf(tokens[1]);
                int port = Integer.valueOf(tokens[2]);
            } else {
                printError("Invalid number of parameters!");
            }

        } else if (tokens[0].equals("start")){
            if (tokens.length == 1){
                start();
            } else {
            	printError("Invalid number of parameters!");
            	System.out.println("Usage: start");
            }
        } else if (tokens[0].equals("stop")){
            if (tokens.length == 1){
                stop();
            } else {
            	printError("Invalid number of parameters!");
            	System.out.println("Usage: stop");
            }
        } else if (tokens[0].equals("shutdown")){
            if (tokens.length == 1){
                shutdown();
            } else {
            	printError("Invalid number of parameters!");
            	System.out.println("Usage: shutdown");
            }
        } else {
        	printError("Command not valid!");
        }
    }

    public void start(){
        logger.info("Number of participating servers: " + participatingServers.size());
        logger.info("Servers will be started");

        for (String server : participatingServers){
            String[] elements = server.split(" ");
            String ip = elements[0];
            String port = elements[1];
            try {
                connect(ip,Integer.valueOf(port),"ecs start");
            } catch (Exception e) {
                logger.error(e.getMessage());
            }
        }

    }
    
    public void stop(){
        logger.info("Number of participating servers: " + participatingServers.size());
        logger.info("Servers will be stopped");

        for (String server : participatingServers){
            String[] elements = server.split(" ");
            String ip = elements[0];
            String port = elements[1];
            try {
                connect(ip,Integer.valueOf(port),"ecs stop");
            } catch (Exception e) {
                logger.error(e.getMessage());
            }
        }

    }
    
    public void shutdown(){
    	//remove each node, get data from node to store into storage.txt
    	logger.info("Number of participating servers: " + participatingServers.size());
        logger.info("Servers will be shutdown, all data will be stored by the ECS");

        for (String server : participatingServers){
            String[] elements = server.split(" ");
            String ip = elements[0];
            String port = elements[1];
            try {
            	String result = connect(ip, Integer.valueOf(port), "ecs shutdown");
            	String[] kvData = result.split(" ");
            	
            	File outputFile = new File("./data/storage.txt");
    			FileWriter write = new FileWriter(outputFile, true);
    			PrintWriter printWrite = new PrintWriter(write);

    			//take each key-value pair and add it to the server's database file
    			for(String kvPair : kvData){
    				String key = kvPair.split(",")[0];
    				String value = kvPair.split(",")[1].replaceAll("-", " ");

    				printWrite.println(key + " " + value);
    			}

    			write.close();
            } catch (Exception e) {
                logger.error(e.getMessage());
            }
        }
    }

    public void initService(int numberOfNodes, int cacheSize, String replacementStrategy){
        
    	if (numberOfNodes <= mIpAndPorts.size()){
	    	//randomly pick a group of nodes
	    	List<String> temp = new ArrayList<String>(mIpAndPorts);
	    	List<String> param = new ArrayList<String>();
	    	
	    	while(numberOfNodes != 0){
	    		Random rand = new Random();
	    		int index = rand.nextInt(temp.size());
	    		
	    		param.add(temp.get(index));
	    		temp.remove(index);
	    		numberOfNodes--;
	    	}
	    	
	    	logger.info("Setting up Hasher");
	        ConsistentHashing consistentHashing = new ConsistentHashing(1,param);
	        
	        StringBuilder sb = new StringBuilder("");
	        participatingServers = new ArrayList<String>();
	        
	        numberOfNodes = param.size();
        
        	logger.info("Adding the particapating servers and setting up the metadata to be sent");
        	
        	for (int i=0; i<numberOfNodes; i++){
        		participatingServers.add(param.get(i));
                
        		try{
        			String[] elements= param.get(i).split(" ");
	                String ip = elements[0];
	                String port =elements[1];
	
	                ConsistentHashing.HashedServer hashedServer= consistentHashing.get(param.get(i));
	                String start = hashedServer.mHashedKeys[0].trim();
	                String end = hashedServer.mHashedKeys[1].trim();
	                
	                sb.append(start.trim()).append(",").append(end.trim()).append(",").append(InetAddress.getByName(ip).getHostName().trim()).append(",").append(port.trim()).append(" ");
        		} catch(Exception e){
        			logger.error(e.getMessage());
        		}
        		
        	}
        	
        	String metadata = sb.toString().trim();
        	logger.info("The metadata: " + metadata);
        	logger.info("Sending metadata and initializing all servers");
        	
            for (int i=0; i<numberOfNodes; i++) {
				try {
					String[] elements= param.get(i).split(" ");
	                String ip = elements[0];
	                String port =elements[1];
	                logger.info("ip passed in: "+ip+ " port: "+port);
					
					ssh(ip,port,"ecs initkvserver " + cacheSize + " " + replacementStrategy + " " + metadata);
					//connect(ip,50028,"ecs initkvserver " + cacheSize + " " + replacementStrategy + " " + metadata);
					
					ConsistentHashing.HashedServer hashedServer= consistentHashing.get(param.get(i));
	                String start = hashedServer.mHashedKeys[0].trim();
	                String end = hashedServer.mHashedKeys[1].trim();
					
					//send persisted data to server that should have it
	                String kvData = "";
	                
	                for(String kvPair : kvList){
	                	//check if within hashRange
	                	if(checkIfInRange(kvPair.split(",")[0], start, end, consistentHashing)){
	                		kvData = kvData + kvPair + " ";
	                	}
	                }
	                
	                if(!kvData.equals("")){
	                	logger.info("Sending any persisted data");
						connect(ip,Integer.parseInt(port),"ecs addkvpairs " + kvData.trim());
	                } else {
	                	logger.info("No persistent data to send");
	                }
	                
				} catch (Exception e) {
					logger.error(e.getMessage());
				}
				
            }
        }else{
            printError("Number of nodes entered is larger than ones available can only enter at most " + mIpAndPorts.size());
        }
    }
    
    public boolean checkIfInRange(String key, String start, String end, ConsistentHashing cs) {
		String keyHash = cs.hashFunction(key);
		
		int biggerThan = keyHash.compareTo(start);
		int lessThan = keyHash.compareTo(end);
		int condition = start.compareTo(end);

		if (biggerThan > 0 && lessThan <= 0 && condition < 0) { //-------------------CHECK THIS--------------//
			return true;
		} else if (biggerThan > 0 && condition > 0) {
			return true;
		} else if (condition == 0) {
			return true;
		} else {
			return false;
		}
	}

    public String connect(String kvAddress, int kvPort, String metadata) throws Exception {
        boolean connected = false;
        String result = null;
        
        while(!connected){
	    	try{
	            OutputStream output;
	            InputStream input;
	            //System.out.println("KVADDRESS: "+kvAddress+" PORT: "+kvPort);
	            Socket clientSocket = new Socket();
	            clientSocket.connect(new InetSocketAddress(kvAddress, kvPort));
	            
	            logger.info("CONNECTED TO SERVER");
	            
	            connected = true;
	            
	            output = clientSocket.getOutputStream();
	            input = clientSocket.getInputStream();
            	
	            //send message to server
	            sendMessage(new TextMessage(metadata), output);
	            
	            result = receiveMessage(input).getMsg();
	            
	            if(result.split(" ").length > 1){
	            	result = result.split(" ", 2)[1];
	            	System.out.println("Server with IP " + kvAddress + " and PORT " + kvPort + " replies: " + result.split(" ", 2)[0]);
	            } else {
	            	System.out.println("Server with IP " + kvAddress + " and PORT " + kvPort + " replies: " + result);
	            }
	
	            disconnect(clientSocket,input,output,kvAddress,Integer.toString(kvPort));
	
	        }catch (Exception e){
	            //System.out.println(e.getMessage());
	        }
        }
        
        return result;
    }

    public void disconnect(Socket clientSocket, InputStream input, OutputStream output, String kvAddress, String kvPort) {
        
    	logger.info("Disconnecting " + kvAddress + ":" + kvPort);
        if(clientSocket != null){
            try{
                clientSocket.close();
                input.close();
                output.close();
            }catch (IOException e){
                logger.error(e.getMessage());
            }

            clientSocket = null;
            logger.info("Connection to " + kvAddress + ":" + kvPort + " closed");
        }
    }

    /**
     * Method sends a TextMessage using this socket.
     * @param msg the message that is to be sent.
     * @throws IOException some I/O error regarding the output stream
     */
    public void sendMessage(TextMessage msg, OutputStream output) throws IOException {
        byte[] msgBytes = msg.getMsgBytes();
        output.write(msgBytes, 0, msgBytes.length);
        output.flush();
    }

    public TextMessage receiveMessage(InputStream input) throws IOException {


        int index = 0;
        byte[] msgBytes = null, tmp = null;
        byte[] bufferBytes = new byte[BUFFER_SIZE];

		/* read first char from stream */
        byte read = (byte) input.read();
        boolean reading = true;

        while(read != 13 && reading) {/* carriage return */
			/* if buffer filled, copy to msg array */
            if(index == BUFFER_SIZE) {
                if(msgBytes == null){
                    tmp = new byte[BUFFER_SIZE];
                    System.arraycopy(bufferBytes, 0, tmp, 0, BUFFER_SIZE);
                } else {
                    tmp = new byte[msgBytes.length + BUFFER_SIZE];
                    System.arraycopy(msgBytes, 0, tmp, 0, msgBytes.length);
                    System.arraycopy(bufferBytes, 0, tmp, msgBytes.length,
                            BUFFER_SIZE);
                }

                msgBytes = tmp;
                bufferBytes = new byte[BUFFER_SIZE];
                index = 0;
            }

			/* only read valid characters, i.e. letters and numbers */
            if((read > 31 && read < 127)) {
                bufferBytes[index] = read;
                index++;
            }

			/* stop reading is DROP_SIZE is reached */
            if(msgBytes != null && msgBytes.length + index >= DROP_SIZE) {
                reading = false;
            }

			/* read next char from stream */
            read = (byte) input.read();
        }

        if(msgBytes == null){
            tmp = new byte[index];
            System.arraycopy(bufferBytes, 0, tmp, 0, index);
        } else {
            tmp = new byte[msgBytes.length + index];
            System.arraycopy(msgBytes, 0, tmp, 0, msgBytes.length);
            System.arraycopy(bufferBytes, 0, tmp, msgBytes.length, index);
        }

        msgBytes = tmp;

		/* build final String */
        TextMessage msg = new TextMessage(msgBytes);
//        System.out.print("Receive message:\t '" + msg.getMsg() + "'");

        return msg;
    }


    public void ssh(String ip, String port, String metadata){

        Process proc = null;
        String script = "src/app_kvEcs/script.sh";
        String[] cmd = {"sh", script, ip, port};

        Runtime run = 	Runtime.getRuntime();
        try {
            proc = run.exec(cmd);
            
            //wait till the server notifies that it is about to listen for connections, then proceed
            ServerSocket ss = new ServerSocket(ecsPort);
            ss.accept();
            
            ss.close();
            
        } catch (IOException e) {
            logger.error(e.getMessage());
        }finally {
            if (proc!=null){
                logger.info("killing process!");
                proc.destroy();

                try {
                    logger.info("SSH: "+ip+" PORT: "+ port);
                    connect(ip, Integer.parseInt(port), metadata);

                } catch (Exception e) {
                	logger.error(e.getMessage());
                }
            }
        }
    }
    private void printError(String error){
        System.out.println("ERROR! " +  error);
    }

    void readFile() {

        BufferedReader br = null;
        FileReader fr = null;
        String FILENAME = "src/app_kvEcs/ecs.conf";
        mIpAndPorts = new ArrayList<>();

        try {

            fr = new FileReader(FILENAME);
            br = new BufferedReader(fr);

            String sCurrentLine;

            br = new BufferedReader(new FileReader(FILENAME));

            while ((sCurrentLine = br.readLine()) != null) {
                logger.info(sCurrentLine);
                String[] splitString = sCurrentLine.split(" ");
                String ipAddress = splitString[1].trim();
                String port = splitString[2].trim();
                mIpAndPorts.add(ipAddress+" "+port);
            }

        } catch (IOException e) {

            logger.error(e.getMessage());

        } finally {

            try {

                if (br != null)
                    br.close();

                if (fr != null)
                    fr.close();

            } catch (IOException ex) {

            	logger.error(ex.getMessage());

            }

        }
    }


    //test the consistent hashing;
    public void tester(){
        String node1 =	"127.0.0.1 	50000";
        String node2 =	"127.0.0.1 	50001";
        String node3 =	"127.0.0.1 	50002";
        String node4 =	"127.0.0.1 	50003";
        String node5 =	"127.0.0.1 	50004";
        String node6 =	"127.0.0.1 	50005";
        String node7 =	"127.0.0.1 	50006";
        List<String> initiation = new ArrayList<>();
        initiation.add(node1);
        //initiation.add(node2);
        //initiation.add(node3);
        //initiation.add(node4);
        //initiation.add(node5);
        //initiation.add(node6);
        //initiation.add(node7);

        ConsistentHashing consistentHashing = new ConsistentHashing(1, initiation);

        //test

        ConsistentHashing.HashedServer hashedServer = consistentHashing.get("one");
        ConsistentHashing.HashedServer hashedServer1 = consistentHashing.get("two");
        ConsistentHashing.HashedServer hashedServer2 = consistentHashing.get("three");
        ConsistentHashing.HashedServer hashedServer3 = consistentHashing.get("four");
        ConsistentHashing.HashedServer hashedServer4 = consistentHashing.get("five");




        System.out.println(Arrays.toString(hashedServer.mHashedKeys) +" "+hashedServer.mIpAndPort);
        System.out.println(Arrays.toString(hashedServer1.mHashedKeys) +" "+hashedServer1.mIpAndPort);
        System.out.println(Arrays.toString(hashedServer2.mHashedKeys) +" "+hashedServer2.mIpAndPort);
        System.out.println(Arrays.toString(hashedServer3.mHashedKeys) +" "+hashedServer3.mIpAndPort);
        System.out.println(Arrays.toString(hashedServer4.mHashedKeys) +" "+hashedServer4.mIpAndPort+"\n");



        System.out.println(consistentHashing.circle.keySet().toString());

        System.out.println("----------------NOW GONNA TEST THE REMOVE------------------\n");

        consistentHashing.remove(node1);
        //consistentHashing.remove(node5);
        //consistentHashing.remove(node7);

        ConsistentHashing.HashedServer hs = consistentHashing.get("one");
        ConsistentHashing.HashedServer hs2 = consistentHashing.get("two");
        ConsistentHashing.HashedServer hs3 = consistentHashing.get("three");
        ConsistentHashing.HashedServer hs4 = consistentHashing.get("four");
        ConsistentHashing.HashedServer hs5 = consistentHashing.get("five");


        System.out.println(Arrays.toString(hs.mHashedKeys) +" "+hs.mIpAndPort);
        System.out.println(Arrays.toString(hs2.mHashedKeys) +" "+hs2.mIpAndPort);
        System.out.println(Arrays.toString(hs3.mHashedKeys) +" "+hs3.mIpAndPort);
        System.out.println(Arrays.toString(hs4.mHashedKeys) +" "+hs4.mIpAndPort);
        System.out.println(Arrays.toString(hs5.mHashedKeys) +" "+hs5.mIpAndPort+"\n");


        System.out.println(consistentHashing.circle.keySet().toString());
    }



}


